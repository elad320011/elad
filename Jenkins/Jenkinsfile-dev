pipeline {
    agent {label 'jenkins-host'}

    environment {
        DOCKER_REGISTRY = "elad320011"
        IMAGE_NAME = "elad-website"
        NAMESPACE = "elad-dev"
        DEPLOYMENT_NAME = "elad-website"
        CONTAINER_NAME = "elad-website"
        TAG = "dev-${new Date().format('yyyyMMddHHmmss')}"
        IMAGE_PATH="${DOCKER_REGISTRY}/${IMAGE_NAME}:${TAG}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'elad-dev',
                    credentialsId: 'elad-git-token',
                    url: 'https://github.com/elad320011/elad.git'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def CUSTOMIMAGE = docker.build("${IMAGE_PATH}")
                    docker.withRegistry("https://registry.hub.docker.com", "elad-dockerhub") {
                        CUSTOMIMAGE.push()
                    }
                }
            }
        }  
        

        stage('Deploy to Kubernetes') {
            steps {
                        sh "kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${IMAGE_PATH} --image-pull-policy=Always -n ${NAMESPACE}"
            }
        }
    
        stage('Testing') {
            steps {
                sh 'python3 -m pip install -r requirements.txt'
                sh 'python3 Tests/test_app.py'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}


/*
Here's an explanation of the changes:
The Docker image tag is set to the Git tag name in the format ${DOCKER_REGISTRY}/${IMAGE_NAME}:${gitTag}.
The docker.withRegistry block is used to authenticate with Docker Hub using a Jenkins credential (docker-hub-credentials-id).
The kubeconfig file is retrieved from a Jenkins credential (kubeconfig-credentials-id) in a secure manner.
The kubectl set image command is used to update the Kubernetes deployment to use the new Docker image.
Note that you'll need to have the git,github and docker plugins installed in your Jenkins instance, and the kubectl command-line tool installed on the Jenkins machine for this pipeline to work. You'll also need to set up the Docker Hub and kubeconfig credentials in Jenkins beforehand.
*/
