pipeline {
    agent {label 'jenkins-host'}

    environment {
        DOCKER_REGISTRY = "elad320011"
        IMAGE_NAME = "elad-website"
        NAMESPACE = "elad"
        DEPLOYMENT_NAME = "elad-website"
        CONTAINER_NAME = "elad-website"
    }

    stages {
        stage('Checkout') {
            // Checkout the repository from GitHub
            steps {
                git branch: 'elad-dev',
                    credentialsId: 'elad-git-token',
                    url: 'https://github.com/elad320011/elad.git'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Get the latest Git tag
                    def gitTag = sh(returnStdout: true, script: "git describe --tags --abbrev=0 --first-parent \$(git rev-list --tags --max-count=1)").trim()
                    // Build a custom Docker image with the Git tag
                    def customImage = docker.build("${DOCKER_REGISTRY}/${IMAGE_NAME}:${gitTag}")
                    // Push the Docker image to Docker Hub
                    docker.withRegistry("https://registry.hub.docker.com", "elad-dockerhub") {
                        customImage.push()
                    }
                }
            }
        }  

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Get the latest Git tag
                    def gitTag = sh(returnStdout: true, script: "git describe --tags --abbrev=0 --first-parent \$(git rev-list --tags --max-count=1)").trim()
                    // Set the custom image path for deployment
                    def customImage = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${gitTag}"
                    // Update the Kubernetes deployment with the custom image
                    sh "kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${customImage} -n ${NAMESPACE}"
                }
            }
        }
    }

    post {
        always {
            // Clean workspace after the pipeline completes
            cleanWs()
        }
    }
}
